name: Build & Deploy Lambda Image

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/lambda-ecr.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 241579295267
  LAMBDA_REPO: bursa-nlq-backend    
  LAMBDA_FUNCTION: bursanlq-backend  

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::241579295267:role/github-oidc-bursa-nlq
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tag
        id: tag
        run: echo "short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build image (Lambda, context = repo root)
        id: build
        run: |
          IMAGE="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.LAMBDA_REPO }}:gh-${{ steps.tag.outputs.short }}"
          docker build \
            -f backend/Dockerfile.lambda \
            -t "$IMAGE" \
            .   # <--- context is repo root (so backend/ exists)
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Push image
        run: docker push "${{ steps.build.outputs.image }}"

      - name: Resolve digest for the pushed tag
        id: digest
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name "${{ env.LAMBDA_REPO }}" \
            --image-ids imageTag=gh-${{ steps.tag.outputs.short }} \
            --query 'imageDetails[0].imageDigest' --output text)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Update Lambda to new image & publish version
        id: updlambda
        run: |
          IMAGE_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.LAMBDA_REPO }}@${{ steps.digest.outputs.digest }}"
          VER=$(aws lambda update-function-code \
            --function-name "${{ env.LAMBDA_FUNCTION }}" \
            --image-uri "$IMAGE_URI" \
            --publish \
            --query 'Version' --output text)
          echo "version=$VER" >> $GITHUB_OUTPUT

      - name: Move prod alias to new version (optional but recommended)
        run: |
          aws lambda get-alias --function-name "${{ env.LAMBDA_FUNCTION }}" --name prod >/dev/null 2>&1 \
            || aws lambda create-alias --function-name "${{ env.LAMBDA_FUNCTION }}" --name prod --function-version "${{ steps.updlambda.outputs.version }}"
          aws lambda update-alias \
            --function-name "${{ env.LAMBDA_FUNCTION }}" \
            --name prod \
            --function-version "${{ steps.updlambda.outputs.version }}"
